Design notes for libmemnotifyqt
===============================

The libmemnotifyqt implements a notification for memory usage events according to levels specified in control file.
Default name space is MEMNOTIFY (defined as MemNotifyNameSpace and later could be MemNotifyNameSpace2 etc) which is declared using
BEGIN_MEMNOTIFY_NAMESPACE and END_MEMOTIFY_NAMESPACE.

Basic usage
-----------
only 3 important steps should be done
1. initialization
2. subscription
3. reaction

Initialization will be handled according to control files (see below), by default /etc/memnotify/default.nm will be used
  [System Memory Low]
  type=cgroups_control
  control=/syspart/cgroup.event_control
  limit=/syspart/memory.memsw.limit_in_bytes
  sensor=/syspart/memory.memsw.usage_in_bytes
  used=90%

To construct the object you can use explicit or implicit constructor call
  notify = new MemoryNotification();
or
  notify = MemoryNotification::create();

The subscription could be done for callback or signal. Callback will be called before signal and might be called from AIO
thread:
  static void myListener(const QString& name, const bool state)
  {
    printf ("memory signal %s delivered in state %d\n", name.toAscii().constData(), state);
    if (state && name == "System Memory Low")
    {
      FlushMyMemory();
    }
  }
  notify.addListener(myListener);

Then you may initiate listening events
  if ( !notify.poll() )     <-- here you may get notifications for all thesholds which set to true.
  {
    oops();
  }

At the end you may require to close and destroy object
  delete notify;


Control files structure
-----------------------
The control file is an ascii ini-style file which contains levels description for specified controllers.
Control file could be located:
- /etc/memnotify folder as a system-wide specification, accessible as "platform.mn"
- $HOME folder - as user-only specification, accessible as "./quake3/memory.mn"
- some path which you like, e.g. "/etc/defaults/quake.mn"

You can point such files in constructor path, thresholds with the same names will be updated according to files list
  notify = new MemoryNotification("default:./quake3/memory.mn");

Overall control file structure is the following:
  [Memory Signal Name]
  type=type_of_controller
  disabled=true|false
  sensor=file path to sensor
  limit=value or path to limit file
  free=value k|m|%
  used=value k|m|%

Details for each parameter:
  type    - now cgroups_control and debug can be used
  disabled- optional parameter to disable pointed watcher
  sensor - path to file which should be used to tracking current memory usage
  limit  - could be a value or path to file which contains limiting value, required only for "free" kind thresholds
  free   - amount of free memory (limit vs. sensor) in kilobytes, megabytes or percents to be raised
  used   - amount of used memory (in sensor) in kilobytes, megabytes or percents to be raised, conflicts with "free"

type=cgroups_control  --- this controller will use cgroups infrastructure to check memory level (RAM or virtual)
  control=path_to_control file usually visible as cgroup.event_control in cgroup. To point the cgroup for current process
    prefix "cgroup:" could be used i.e. "control = cgroup:/cgroup.event_control" is a valid setting.

type=debug -- this controller will use pointed sensor file with inotify access to control memory level
  nothing additional, you can "echo currentMem > sensor" to see updates in application


Requirements for cgroups
------------------------

The memory accounting should be enabled in cgroups. In addition to that the memory.use_hierarchy MUST be set to 1.
This file is inherited automatic in nested groups, so it is enough to do once.
In case if precise accounting of used memory for nested tasks is required, the memory.move_charge_at_immigrate
for all subgroups must be set to 1 also to report proper thresholds values.

Example of ohmd mounting used for debugging is:
        mount -t cgroup -o rw,relatime,freezer,memory,cpu none /syspart
        echo 1 > /syspart/memory.move_charge_at_immigrate
        echo 1 > /syspart/memory.use_hierarchy


Classes details
---------------

file memory_notification
MEMNOTIFY::MemoryNotification -- Main proxy class to control subscription and propagate events
  1. Memory events notifications are not sorted by memory usage, they delivery is based on notifications from low level APIs
  2. If memory level is set to ON you will get notification during subscription (see listen or queryEvents)

  static create("path specs")

  bool poll()  -- starts to listen in automatic mode using aio, required subscription
  uint query(int* fd, uint size); -- queries events descriptors to make poll outside, required subscription
  uint process(const int* fd, uint counter);  -- handles events detected in extenal poll loop. required subscription

  enable()  -- enabsle tracking, called automatical when listen() or queryEvents() called
  disable() -- disable tracking, called before destruction of object or if you need re-subscribe
  watcher(watcherName) -- find Watcher object according to passed name of threshold

  # subscription (any or both)
  signal notified(const QString& name, const bool state);

  typedef void (*OBSERVER)(const QString& name, const bool state);
  bool addObserver(OBSERVER observer);
  bool delObserver(OBSERVER observer);

  valid() -- validate current object (e.g. file exists)
  dump()  -- dump the contents for debugging

Todo:
  1. to create actual observers we can track
  protected:
    virtual void connectNotify(const char* signal);
    virtual void disconnectNotify(const char* signal);

file poller
  Thread-based poll call if we do not plan to use query/process combination. That is expected to have less 10 thresholds
  per application and not much updates - so pol() call was used. But it could be replaced to epoll if necessary.

file cached_file
MEMNOTIFY::CachedFile -- file with cached contents, knows how to reload contents in cheapest way - rewind and read
  reload() -- reload file according to specified limit
  text()   -- file contents as a text (const char*)
  value()  -- file value
  valid()  -- validate current object (e.g. file exists)
  dump()   -- dump the contents for debugging
  path()   -- path to compare
  handler  -- file descriptor to compare

file watcher
MEMNOTIFY::Watcher    -- object which listen for updates, could be
  name
  enable
  disable
  handler
  state()

file cgroups_watcher
  CgroupsWatcher -- uses eventfd for tracking events in cgroups

file debug_watcher
  DebugWatcher -- uses inotify for tracking events using debug filess

file watcher_builder
MEMNOTIFY::WatcherBuilder -- makes a controller based on description "type=" and QSettins

file platform
MEMNOTIFY::Platform -- platform parameters and settings
- MEMNOTIFY env variable with settings (see environment.txt for additional information)
- total, free and used memory
- location of /syspart
- TBD

